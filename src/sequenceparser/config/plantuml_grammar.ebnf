start: "@startuml" diagram_name? sequence_diagram "@enduml"

sequence_diagram: (participant|legend|group|communication_step|parameter|activation|note|ref)*

diagram_name: DOUBLE_QUOTED_STRING
participant: ("participant" | "actor") participant_name ("as" CNAME)? COLOR?
parameter: CNAME parameter_param? _NL
parameter_param: /\d+/

group_head: GROUP_TYPE COLOR? TEXT?
group_main_block: (communication_step|group|activation|note|ref)*
group_else_block: "else" TEXT? (communication_step|group|activation|note|ref)*
group: comment? group_head group_main_block (group_else_block*)? GROUP_END
communication_step: comment? CONSUMER "-" ("[" COLOR "]")? direction_indicator PROVIDER (ACTIVATION_SIGN ACTIVATION_SIGN?)? ":" message
message: (decomposed_message|single_message)
single_message: TEXT
decomposed_message: CALL_MESSAGE ("(" CALL_INPUT ")")? "()"? (":" CALL_OUTPUT)?
comment: sme_inline_decomposed_comment|inline_comment|multiline_comment
note: note_singleline | note_multiline
note_singleline: "note" "over" ACTOR ":" TEXT
note_multiline: "note" SIDE? _NL /(.|\n)+?end note/
direction_indicator: request|response
request: ">"
response: "->"
ref: ref_single

ref_single: "ref" "over" ACTOR ":" TEXT _NL

multiline_comment: /\/'(?!\/)[^']*(?:\r\n[^']*)*\'\//
inline_comment: "'" /.+/
sme_inline_decomposed_comment: "'" /.+?(?=\|)/ "|" /.+?(?=\|)/ ("|" TEXT)?

participant_name: DOUBLE_QUOTED_STRING
legend: "legend" _NL /(.|\||\n)+?endlegend/
activation: ACTIVATION_START (group|communication_step|activation|note)* ACTIVATION_END

ACTIVATION_START: ACTOR"++"
ACTIVATION_END: ACTOR"--"
ACTIVATION_SIGN: "++"|"--"

CALL_MESSAGE: /[^():\n]+/
CALL_INPUT: CALL_PARAMS
CALL_OUTPUT: CALL_PARAMS
CALL_PARAMS: /[^()\n]+/

GROUP_END: /end[ \t\f]+(opt|group|alt|loop)/i
SIDE: CNAME
TEXT: /.+/

GROUP_TYPE: "group"|"opt"|"loop"|"alt"
ACTOR: CNAME
PROVIDER: ACTOR
CONSUMER: ACTOR
MESSAGE: TEXT
COLOR: "#"CNAME
DOUBLE_QUOTED_STRING: /"[^"]*"/

%import common.CNAME
%import common.ESCAPED_STRING
%import common.WORD
%import common.DIGIT
%import common.WS
%import common.NEWLINE -> _NL
%ignore WS